from pycococreator import PyCocoCreator
from pycococreatortools import PyCocoCreatorTools
from coco_dataset import CocoDataset
from coco_json_utils import CocoJsonCreator
from args import Args

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Generate")
    parser.add_argument("-dn", "--database_name", dest="database_name",
                        default="hedychium_coronarium", help="path to root of datasets")
    parser.add_argument("-b", "--base_path", dest="base_path",
                        default="../images/train/", help="base path to images")
    parser.add_argument("-i", "--images_path", dest="images_path",
                        default="images/", help="path to images")
    parser.add_argument("-m", "--masks_path", dest="masks_path",
                        default="masks/", help="path to masks")
    parser.add_argument("-j", "--instances_json", dest="instances_json", default="coco_instances.json",
                         help="path to JSON path of coco instances")
    parser.add_argument("-mw", "--max_width", dest="max_width", default=920, type=int,
                        help="max width to show images")
    parser.add_argument("-id", "--image_id", dest="image_id", default=10, type=int,
                        help="image to open/generate HTML")

    # Generate COCO JSON - coco_json_utils
    parser.add_argument("-md", "--mask_definition", dest="mask_definition", default="mask_definition.json", 
                         help="path to a mask definition JSON file, generated by MaskJsonUtils module")
    parser.add_argument("-di", "--dataset_info", dest="dataset_info",
                        help="path to a dataset info JSON file")
    parser.add_argument("-at", "--generate_automatic_info", dest="generate_automatic_info", default=1, type=int,
                        help="to generate automatic info: 0 or 1")                        
    parser.add_argument("-rw", "--width", dest="width", default=4000, type=int,
                        help="width to resize images")
    parser.add_argument("-rh", "--height", dest="height", default=3000, type=int,
                        help="height to resize images")

    args = parser.parse_args()

    # this process will be slow.
    if(Args.generate_automatic_info == 1):
        cjc = CocoJsonCreator()
        cjc.main(args)

    creator_tools = PyCocoCreatorTools()
    coco_dataset = CocoDataset(args)
    coco_dataset.main(args)

    coco = PyCocoCreator()
    coco.main(args, creator_tools)

    # Just For Jupyter/Colab
    # coco_dataset.display_categories()
    # html = coco_dataset.display_image(coco_dataset.image_id)
    # IPython.display.HTML(html)
